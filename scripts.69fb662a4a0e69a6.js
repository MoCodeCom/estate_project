import*as t from"@angular/core";import{Injectable as C,EventEmitter as r,Component as D,ViewChild as I,Input as u,Output as s,NgModule as f}from"@angular/core";import*as k from"@angular/common";import{CommonModule as y}from"@angular/common";class n{static setModuleName(e){n.moduleName=e}static getModuleName(){return n.moduleName}static setPlotly(e){if("object"==typeof e&&"function"!=typeof e.react)throw new Error("Invalid plotly.js version. Please, use any version above 1.40.0");n.plotly=e}static insert(e){return-1===n.instances.indexOf(e)&&n.instances.push(e),e}static remove(e){const i=n.instances.indexOf(e);i>=0&&(n.instances.splice(i,1),n.plotly.purge(e))}getInstanceByDivId(e){for(const i of n.instances)if(i&&i.id===e)return i}async getPlotly(){return await this.waitFor(()=>"waiting"!==this._getPlotly()),this._getPlotly()}_getPlotly(){if(typeof n.plotly>"u")throw new Error("ViaCDN"===n.moduleName?"Error loading Peer dependency plotly.js from CDN url":"Peer dependency plotly.js isn't installed");return n.plotly}waitFor(e){return new Promise(i=>{const o=()=>{e()?i():setTimeout(o,10)};o()})}async newPlot(e,i,o,p,c){if(await this.waitFor(()=>"waiting"!==this._getPlotly()),c){const h={data:i,layout:o,config:p,frames:c};return this._getPlotly().newPlot(e,h).then(()=>n.insert(e))}return this._getPlotly().newPlot(e,i,o,p).then(()=>n.insert(e))}plot(e,i,o,p,c){if(c){const h={data:i,layout:o,config:p,frames:c};return this._getPlotly().newPlot(e,h)}return this._getPlotly().newPlot(e,i,o,p)}update(e,i,o,p,c){if(c){const h={data:i,layout:o,config:p,frames:c};return this._getPlotly().react(e,h)}return this._getPlotly().react(e,i,o,p)}resize(e){return this._getPlotly().Plots.resize(e)}}n.instances=[],n.plotly=void 0,n.moduleName=void 0,n.\u0275fac=t.\u0275\u0275ngDeclareFactory({minVersion:"12.0.0",version:"15.2.6",ngImport:t,type:n,deps:[],target:t.\u0275\u0275FactoryTarget.Injectable}),n.\u0275prov=t.\u0275\u0275ngDeclareInjectable({minVersion:"12.0.0",version:"15.2.6",ngImport:t,type:n,providedIn:"root"}),t.\u0275\u0275ngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.6",ngImport:t,type:n,decorators:[{type:C,args:[{providedIn:"root"}]}]});class g{constructor(e,i,o){this.plotly=e,this.iterableDiffers=i,this.keyValueDiffers=o,this.defaultClassName="js-plotly-plot",this.revision=0,this.debug=!1,this.useResizeHandler=!1,this.updateOnLayoutChange=!0,this.updateOnDataChange=!0,this.updateOnlyWithRevision=!1,this.initialized=new r,this.update=new r,this.purge=new r,this.error=new r,this.afterExport=new r,this.afterPlot=new r,this.animated=new r,this.animatingFrame=new r,this.animationInterrupted=new r,this.autoSize=new r,this.beforeExport=new r,this.buttonClicked=new r,this.click=new r,this.plotlyClick=new r,this.clickAnnotation=new r,this.deselect=new r,this.doubleClick=new r,this.framework=new r,this.hover=new r,this.legendClick=new r,this.legendDoubleClick=new r,this.react=new r,this.relayout=new r,this.restyle=new r,this.redraw=new r,this.selected=new r,this.selecting=new r,this.sliderChange=new r,this.sliderEnd=new r,this.sliderStart=new r,this.transitioning=new r,this.transitionInterrupted=new r,this.unhover=new r,this.relayouting=new r,this.treemapclick=new r,this.sunburstclick=new r,this.eventNames=["afterExport","afterPlot","animated","animatingFrame","animationInterrupted","autoSize","beforeExport","buttonClicked","clickAnnotation","deselect","doubleClick","framework","hover","legendClick","legendDoubleClick","react","relayout","restyle","redraw","selected","selecting","sliderChange","sliderEnd","sliderStart","transitioning","transitionInterrupted","unhover","relayouting","treemapclick","sunburstclick"]}ngOnInit(){this.createPlot().then(()=>{const e=this.createFigure();this.initialized.emit(e)}),this.click.observers.length>0&&console.error("DEPRECATED: Reconsider using `(plotlyClick)` instead of `(click)` to avoid event conflict. Please check https://github.com/plotly/angular-plotly.js#FAQ")}ngOnDestroy(){"function"==typeof this.resizeHandler&&(this.getWindow().removeEventListener("resize",this.resizeHandler),this.resizeHandler=void 0);const e=this.createFigure();this.purge.emit(e),n.remove(this.plotlyInstance)}ngOnChanges(e){let i=!1;const o=e.revision;o&&!o.isFirstChange()&&(i=!0);const p=e.debug;p&&!p.isFirstChange()&&(i=!0),i&&this.updatePlot(),this.updateWindowResizeHandler()}ngDoCheck(){if(this.updateOnlyWithRevision)return!1;let e=!1;this.updateOnLayoutChange&&(this.layoutDiffer?this.layoutDiffer.diff(this.layout)&&(e=!0):this.layoutDiffer=this.layout?this.keyValueDiffers.find(this.layout).create():void 0),this.updateOnDataChange&&(this.dataDiffer?this.dataDiffer.diff(this.data)&&(e=!0):this.dataDiffer=Array.isArray(this.data)?this.iterableDiffers.find(this.data).create(this.dataDifferTrackBy):void 0),e&&this.plotlyInstance&&this.updatePlot()}getData(){return this.data??[]}getWindow(){return window}getClassName(){let e=[this.defaultClassName];return Array.isArray(this.className)?e=e.concat(this.className):this.className&&e.push(this.className),e.join(" ")}createPlot(){return this.plotly.newPlot(this.plotEl.nativeElement,this.getData(),this.layout,this.config,this.frames).then(e=>{this.plotlyInstance=e,this.getWindow().gd=this.debug?e:void 0,this.eventNames.forEach(i=>{const o=`plotly_${i.toLowerCase()}`,p=this[i];e.on(o,c=>p.emit(c))}),e.on("plotly_click",i=>{this.plotlyClick.emit(i)}),this.updateWindowResizeHandler()},e=>{console.error("Error while plotting:",e),this.error.emit(e)})}createFigure(){const e=this.plotlyInstance;return{data:e.data,layout:e.layout,frames:e._transitionData?e._transitionData._frames:null}}updatePlot(){if(!this.plotlyInstance){const i=new Error("Plotly component wasn't initialized");throw this.error.emit(i),i}const e={...this.layout};return this.plotly.update(this.plotlyInstance,this.getData(),e,this.config,this.frames).then(()=>{const i=this.createFigure();this.update.emit(i)},i=>{console.error("Error while updating plot:",i),this.error.emit(i)})}updateWindowResizeHandler(){this.useResizeHandler?void 0===this.resizeHandler&&(this.resizeHandler=()=>this.plotly.resize(this.plotlyInstance),this.getWindow().addEventListener("resize",this.resizeHandler)):"function"==typeof this.resizeHandler&&(this.getWindow().removeEventListener("resize",this.resizeHandler),this.resizeHandler=void 0)}dataDifferTrackBy(e,i){const o=Object.assign({},i,{uid:""});return JSON.stringify(o)}}g.\u0275fac=t.\u0275\u0275ngDeclareFactory({minVersion:"12.0.0",version:"15.2.6",ngImport:t,type:g,deps:[{token:n},{token:t.IterableDiffers},{token:t.KeyValueDiffers}],target:t.\u0275\u0275FactoryTarget.Component}),g.\u0275cmp=t.\u0275\u0275ngDeclareComponent({minVersion:"14.0.0",version:"15.2.6",type:g,selector:"plotly-plot",inputs:{data:"data",layout:"layout",config:"config",frames:"frames",style:"style",divId:"divId",revision:"revision",className:"className",debug:"debug",useResizeHandler:"useResizeHandler",updateOnLayoutChange:"updateOnLayoutChange",updateOnDataChange:"updateOnDataChange",updateOnlyWithRevision:"updateOnlyWithRevision"},outputs:{initialized:"initialized",update:"update",purge:"purge",error:"error",afterExport:"afterExport",afterPlot:"afterPlot",animated:"animated",animatingFrame:"animatingFrame",animationInterrupted:"animationInterrupted",autoSize:"autoSize",beforeExport:"beforeExport",buttonClicked:"buttonClicked",click:"click",plotlyClick:"plotlyClick",clickAnnotation:"clickAnnotation",deselect:"deselect",doubleClick:"doubleClick",framework:"framework",hover:"hover",legendClick:"legendClick",legendDoubleClick:"legendDoubleClick",react:"react",relayout:"relayout",restyle:"restyle",redraw:"redraw",selected:"selected",selecting:"selecting",sliderChange:"sliderChange",sliderEnd:"sliderEnd",sliderStart:"sliderStart",transitioning:"transitioning",transitionInterrupted:"transitionInterrupted",unhover:"unhover",relayouting:"relayouting",treemapclick:"treemapclick",sunburstclick:"sunburstclick"},providers:[n],viewQueries:[{propertyName:"plotEl",first:!0,predicate:["plot"],descendants:!0,static:!0}],usesOnChanges:!0,ngImport:t,template:'<div #plot [attr.id]="divId" [ngClass]="getClassName()" [ngStyle]="style">\n      <ng-content></ng-content>\n    </div>',isInline:!0,dependencies:[{kind:"directive",type:k.NgClass,selector:"[ngClass]",inputs:["class","ngClass"]},{kind:"directive",type:k.NgStyle,selector:"[ngStyle]",inputs:["ngStyle"]}]}),t.\u0275\u0275ngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.6",ngImport:t,type:g,decorators:[{type:D,args:[{selector:"plotly-plot",template:'<div #plot [attr.id]="divId" [ngClass]="getClassName()" [ngStyle]="style">\n      <ng-content></ng-content>\n    </div>',providers:[n]}]}],ctorParameters:function(){return[{type:n},{type:t.IterableDiffers},{type:t.KeyValueDiffers}]},propDecorators:{plotEl:[{type:I,args:["plot",{static:!0}]}],data:[{type:u}],layout:[{type:u}],config:[{type:u}],frames:[{type:u}],style:[{type:u}],divId:[{type:u}],revision:[{type:u}],className:[{type:u}],debug:[{type:u}],useResizeHandler:[{type:u}],updateOnLayoutChange:[{type:u}],updateOnDataChange:[{type:u}],updateOnlyWithRevision:[{type:u}],initialized:[{type:s}],update:[{type:s}],purge:[{type:s}],error:[{type:s}],afterExport:[{type:s}],afterPlot:[{type:s}],animated:[{type:s}],animatingFrame:[{type:s}],animationInterrupted:[{type:s}],autoSize:[{type:s}],beforeExport:[{type:s}],buttonClicked:[{type:s}],click:[{type:s}],plotlyClick:[{type:s}],clickAnnotation:[{type:s}],deselect:[{type:s}],doubleClick:[{type:s}],framework:[{type:s}],hover:[{type:s}],legendClick:[{type:s}],legendDoubleClick:[{type:s}],react:[{type:s}],relayout:[{type:s}],restyle:[{type:s}],redraw:[{type:s}],selected:[{type:s}],selecting:[{type:s}],sliderChange:[{type:s}],sliderEnd:[{type:s}],sliderStart:[{type:s}],transitioning:[{type:s}],transitionInterrupted:[{type:s}],unhover:[{type:s}],relayouting:[{type:s}],treemapclick:[{type:s}],sunburstclick:[{type:s}]}});class a{constructor(){}}a.\u0275fac=t.\u0275\u0275ngDeclareFactory({minVersion:"12.0.0",version:"15.2.6",ngImport:t,type:a,deps:[],target:t.\u0275\u0275FactoryTarget.NgModule}),a.\u0275mod=t.\u0275\u0275ngDeclareNgModule({minVersion:"14.0.0",version:"15.2.6",ngImport:t,type:a,declarations:[g],imports:[y],exports:[g]}),a.\u0275inj=t.\u0275\u0275ngDeclareInjector({minVersion:"12.0.0",version:"15.2.6",ngImport:t,type:a,providers:[n],imports:[y]}),t.\u0275\u0275ngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.6",ngImport:t,type:a,decorators:[{type:f,args:[{declarations:[g],imports:[y],providers:[n],exports:[g]}]}],ctorParameters:function(){return[]}});class d{constructor(){if(!this.isValid())throw new Error("Invalid PlotlyJS object. Please check https://github.com/plotly/angular-plotly.js#quick-start to see how to add PlotlyJS to your project.");n.setPlotly(d.plotlyjs)}isValid(){return void 0!==d.plotlyjs&&("function"==typeof d.plotlyjs.plot||"function"==typeof d.plotlyjs.newPlot)}}d.plotlyjs={},d.\u0275fac=t.\u0275\u0275ngDeclareFactory({minVersion:"12.0.0",version:"15.2.6",ngImport:t,type:d,deps:[],target:t.\u0275\u0275FactoryTarget.NgModule}),d.\u0275mod=t.\u0275\u0275ngDeclareNgModule({minVersion:"14.0.0",version:"15.2.6",ngImport:t,type:d,imports:[y,a],exports:[a]}),d.\u0275inj=t.\u0275\u0275ngDeclareInjector({minVersion:"12.0.0",version:"15.2.6",ngImport:t,type:d,providers:[n],imports:[y,a,a]}),t.\u0275\u0275ngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.6",ngImport:t,type:d,decorators:[{type:f,args:[{declarations:[],imports:[y,a],providers:[n],exports:[a]}]}],ctorParameters:function(){return[]}});class l{constructor(e){this.plotlyService=e,n.setModuleName("ViaCDN")}static setPlotlyVersion(e){if("latest"!==e&&!/^\d\.\d{1,2}\.\d{1,2}$/.test(e))throw new Error("Invalid plotly version. Please set 'latest' or version number (i.e.: 1.4.3)");l.loadViaCDN(),l.plotlyVersion=e}static setPlotlyBundle(e){if(!(null===e||l.plotlyBundleNames.indexOf(e)>=0)){const o=l.plotlyBundleNames.map(p=>`"${p}"`).join(", ");throw new Error(`Invalid plotly bundle. Please set to null for full or ${o} for a partial bundle.`)}l.plotlyBundle=e}static loadViaCDN(){n.setPlotly("waiting"),setTimeout(()=>{const i=null==l.plotlyBundle?`https://cdn.plot.ly/plotly-${l.plotlyVersion}.min.js`:`https://cdn.plot.ly/plotly-${l.plotlyBundle}-${l.plotlyVersion}.min.js`,o=document.createElement("script");o.type="text/javascript",o.src=i,o.onerror=()=>console.error(`Error loading plotly.js library from ${i}`),document.getElementsByTagName("head")[0].appendChild(o);let c=200;const h=()=>{const v=window.Plotly;if(v)n.setPlotly(v);else{if(!(c>0))throw new Error(`Error loading plotly.js library from ${i}. Timeout.`);c--,setTimeout(h,50)}};h()})}}l.plotlyBundle=void 0,l.plotlyVersion="latest",l.plotlyBundleNames=["basic","cartesian","geo","gl3d","gl2d","mapbox","finance"],l.\u0275fac=t.\u0275\u0275ngDeclareFactory({minVersion:"12.0.0",version:"15.2.6",ngImport:t,type:l,deps:[{token:n}],target:t.\u0275\u0275FactoryTarget.NgModule}),l.\u0275mod=t.\u0275\u0275ngDeclareNgModule({minVersion:"14.0.0",version:"15.2.6",ngImport:t,type:l,imports:[y,a],exports:[a]}),l.\u0275inj=t.\u0275\u0275ngDeclareInjector({minVersion:"12.0.0",version:"15.2.6",ngImport:t,type:l,providers:[n],imports:[y,a,a]}),t.\u0275\u0275ngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.6",ngImport:t,type:l,decorators:[{type:f,args:[{declarations:[],imports:[y,a],providers:[n],exports:[a]}]}],ctorParameters:function(){return[{type:n}]}});class m{constructor(){const e=window.Plotly;if(typeof e>"u")throw new Error("Plotly object not found on window.");n.setPlotly(e)}}m.\u0275fac=t.\u0275\u0275ngDeclareFactory({minVersion:"12.0.0",version:"15.2.6",ngImport:t,type:m,deps:[],target:t.\u0275\u0275FactoryTarget.NgModule}),m.\u0275mod=t.\u0275\u0275ngDeclareNgModule({minVersion:"14.0.0",version:"15.2.6",ngImport:t,type:m,imports:[y,a],exports:[a]}),m.\u0275inj=t.\u0275\u0275ngDeclareInjector({minVersion:"12.0.0",version:"15.2.6",ngImport:t,type:m,providers:[n],imports:[y,a,a]}),t.\u0275\u0275ngDeclareClassMetadata({minVersion:"12.0.0",version:"15.2.6",ngImport:t,type:m,decorators:[{type:f,args:[{declarations:[],imports:[y,a],providers:[n],exports:[a]}]}],ctorParameters:function(){return[]}});export{g as PlotlyComponent,d as PlotlyModule,n as PlotlyService,a as PlotlySharedModule,l as PlotlyViaCDNModule,m as PlotlyViaWindowModule};